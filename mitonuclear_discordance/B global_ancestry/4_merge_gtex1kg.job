#!/bin/bash
#SBATCH --job-name=merge_gtex1kg
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=200000
#SBATCH --time=0-80:00:00
#SBATCH --mail-type=END
#SBATCH --mail-user=ejt89@psu.edu
#SBATCH --chdir=/nfs/secure/scratch6/nekrut_gtex/ejt89/mito_gtex/bin/B_globalAnc/GlobalAnc_v8
#SBATCH --output=/nfs/secure/scratch6/nekrut_gtex/ejt89/mito_gtex/bin/B_globalAnc/GlobalAnc_v8/log/ejt89-merge_gtex1kg-%j.out
#SBATCH --error=/nfs/secure/scratch6/nekrut_gtex/ejt89/mito_gtex/bin/B_globalAnc/GlobalAnc_v8/log/ejt89-merge_gtex1kg-%j.err

echo "Job started"; date "+%Y-%m-%d.%H:%M:%S"
export CONDA_ENVS_PATH=/home/ejt89/.conda/envs
source /opt/anaconda/etc/profile.d/conda.sh
conda activate /home/ejt89/.conda/envs/ancestry
#source activate /home/ejt89/.conda/envs/ancestry
#conda activate ancestry
conda info --envs
conda list

#########################################################################
# Merge GTEx and 1000G: 						#
#########################################################################

# Stop on any errors and print all commands.
set -uex

	# Arguments.
	#prefix_G=
	#prefix_1=
	input_G=GTEX-WGS-ALL_hg19_filtered_nopal
	input_1=1KG-WGS-ALL_biall_nopal
	
	prefix_M=MERGED-WGS-ALL_hg19_biall_nopal

mkdir -p merged_gtex1kg; cd merged_gtex1kg
mkdir -p ALL; cd ALL

# Replace the original SNP IDs with a common CHR_POS.
#bash ../../modify_bim.sh ${input_1}.bim 'Overwrite'
#bash ../../modify_bim.sh ${input_G}.bim 'Overwrite'

# Create input files for bedtools from the new IDs.
#cat ${input_G}.bim | cut -f1,4 | paste - <(cat ${input_G}.bim | cut -f4) | paste - <(cat ${input_G}.bim | cut -f2) > TESTG
#cat ${input_1}.bim | cut -f1,4 | paste - <(cat ${input_1}.bim | cut -f4) | paste - <(cat ${input_1}.bim | cut -f2) > TEST1

# Intersect to get common SNPs across GTEx and 1000G.
#bedtools intersect -a TEST1 -b TESTG > list.common.snps

# Try (and fail) to merge GTEx and 1000G.
# Provides the list (.missnp) of problematic sites. 
#	echo ${input_1} > all_files.txt
#	echo ${input_G} >> all_files.txt
#plink --merge-list all_files.txt --make-bed --out ${prefix_M}

# Look for the .missnp sites in the GTEx and 1000G files.
#####for ID in `cat ${prefix_M}-merge.missnp`; do grep $ID ${input_G}.bim >> TEST.missnp ; grep $ID ${input_1}.bim >> TEST.missnp ; done

### Exclude the SNPs that seem to be multiallelic.
	cp ${prefix_M}-merge.missnp exclude.missnp
plink --bfile ${input_G} --exclude exclude.missnp --make-bed --out ${input_G}_excl
plink --bfile ${input_1} --exclude exclude.missnp --make-bed --out ${input_1}_excl


###### Flip (instead of exclude) the SNPs that seem to be multiallelic.
######	cp MERGED-WGS-ALL_biall_nopal-merge.missnp flip.missnp
######plink --bfile GTEX-WGS-ALL_biall_nopal --flip flip.missnp --make-bed --out GTEX-WGS-ALL_biall_nopal_flipd

######	prefix=MERGED-WGS-ALL_biall_nopal_flipd

# Merge GTEx and 1000G after excluding problematic sites.
	echo ${input_1}_excl > all_files.txt
	echo ${input_G}_excl >> all_files.txt
plink --merge-list all_files.txt --make-bed --out ${prefix_M}_excl

##### Flip-scan.
#####bash ../../modify_bim.sh ${prefix}.bim "Overwrite"
#####bash ../../modify_fam.sh ${prefix}.fam "Overwrite"   # Can be replaced by using --pheno mypheno.txt
#####plink --bfile ${prefix} \
#####	--flip-scan --flip-scan-verbose --allow-no-sex \
#####	--out ${prefix}_flipscan

##### Take output '.flipscan.verbose' and keeps the SNPs to flip.
#####R ../../make_fliplist.R



# Filter by maf and missingness.
plink --bfile ${prefix_M}_excl \
	--maf 0.01 --geno 0.1 \
	--make-bed --out ${prefix_M}_excl_filt

# Extract the common SNPs.
plink --bfile ${prefix_M}_excl_filt \
	--extract list.common.snps --allow-no-sex \
	--make-bed --out ${prefix_M}_excl_filt_common

# Prune.
# List of sites to prune.
plink --bfile ${prefix_M}_excl_filt_common \
	--maf 0.01 --geno 0.1 --mind 0.1 \
	--indep 50 5 2 --allow-no-sex \
	--out ${prefix_M}_excl_filt_common_prune
# Keep that list of pruned sites.
plink --bfile ${prefix_M}_excl_filt_common \
	--extract ${prefix_M}_excl_filt_common_prune.prune.in \
	--maf 0.01 --geno 0.1 --mind 0.1 \
	--make-bed --out ${prefix_M}_excl_filt_common_pruned

# Generate IBS values (for pop stratification).
plink --bfile ${prefix_M}_excl_filt_common_pruned \
	--genome \
	--allow-no-sex --out ${prefix_M}_excl_genome

# Generate MDS clustering.
plink --bfile ${prefix_M}_excl_filt_common_pruned \
	--read-genome ${prefix_M}_excl_genome.genome --cluster --K 2 --mds-plot 4 \
	--allow-no-sex --out ${prefix_M}_excl_mds

# Create plots.
Rscript ../../makeplot_mds.R ${prefix_M}_excl_mds.mds "MERGED"




echo "Job ended"; date "+%Y-%m-%d.%H:%M:%S"

