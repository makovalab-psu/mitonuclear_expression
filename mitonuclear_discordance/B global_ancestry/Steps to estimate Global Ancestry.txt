Aim: Obtain global ancestry for each GTEx sample.

Step 0.1: Download whole-genome variants for all GTEx samples (requires dbGap access).

Step 0.2: Download whole-genome variants for The 1000 Genomes Project populations (https://www.internationalgenome.org/data-portal/sample).

Step 1: Within-dataset Quality Control steps. [ Example script: 1_plink_qc.sh  ]
        *** Repeat this step for GTEx and for 1000 Genomes data separately ***
        
        # Change variants file (VCF) into PLINK format (and exclude MT).
        plink --vcf <INPUT.vcf> --allow-extra-chr --chr 1-22 XY --out <INPUT.plink>
        
        # Filter by Minor Allele Freq, Genotype missingness across samples, and keep biallelic sites.
        # Keep only AfAm and EuAm individuals.
        plink --bfile <INPUT> --maf 0.01 --geno 0.2 --keep <Select_Individuals.txt> --biallelic-only strict --out <INPUT_filtered>
        
        # Identify the palindromic SNPs, then filter them out.
        Rscript rm_palindromic.R <INPUT_filtered.bim>
        plink --bfile <INPUT_filtered> --extract list.nonpalindromic.snps --out <INPUT_filtered_nopal>
        
        # Test for signs of population stratification (pruning sites by LD, generating IBS values, MDS clustering).
        # Prune sites.
        plink --bfile <INPUT_filtered_nopal> --indep 50 5 2 --allow-no-sex --out <INPUT_filtered_nopal_prune>
        plink --bfile <INPUT_filtered_nopal> --maf 0.01 --geno 0.1 --mind 0.1 --extract <INPUT_filtered_nopal_prune.prune.in> --out <INPUT_filtered_nopal_pruned>
        # Generate IBS values.
        plink --bfile ${prefix}_filtered_pruned --genome --out ${prefix}_genome
        # Generate MDS clustering.
        plink --bfile ${prefix}_filtered_pruned --read-genome ${prefix}_genome.genome --cluster --K 2 --mds-plot 4 --out ${prefix}_mds
        # Create MDS plots.
        Rscript makeplot_mds.R ${prefix}_mds.mds <GTEX/1000G>
        
        # Proceed the data does not have issues with population stratification.

Step 2: Merge GTEx and 1000 Genomes datasets. [ Example script: 2_merge_gtex1kg.sh ]
        
        # Intersect to get common SNPs between GTEx and 1000G.
        bedtools intersect -a variants.GTEx.bed -b variants.1000G.bed > list.common.snps
        
        # Merge GTEx and 1000G variant files.
        echo <"GTEx_filtered_nopal"> > files_to_merge.txt ; echo <"1000G_filtered_nopal"> >> files_to_merge.txt
        plink --merge-list files_to_merge.txt --make-bed --out ${prefix_M}
        
Step 3: Quality control steps (between GTEx and 1000 Genomes).

        # Repeat Step 1 but on the merged dataset.

Step 4: Global ancestry estimates using ADMIXTURE (https://dalexander.github.io/admixture/download.html). [ Example script: 4_admix.sh ]

       ## Obtain number of founder populations in GTEx populations: 
        # Cross-validation error for GTEx samples (without reference populations), assuming a K of 1, 2, 3, or 4.
        K = <1/2/3/4>
        ./admixture32 --cv <GTEx_dataset.bed> ${K}
        
       ## Identify which 1000 Genomes populations can serve as the founder populations:
        # Unsupervised run of GTEx and all 1000 Genomes populations.
        ./admixture32 <GTEx_1000G_dataset.bed> ${K} 
        
       ## Compute global ancestry estimates (generates a Q file):
        # Supervised run of GTEx samples with CEU (Central Europeans in Utah) and YRI (Yorubans) 1000 Genomes populations.
        # The .pop file indicates the population labels (for K=2, a founder population 1, founder population 2 and the unknown/GTEx samples).
        K = 2
        bash ${DATADIR}/make_pop.sh <GTEx_CEU_YRI_dataset>
        ./admixture32 <GTEx_CEU_YRI_dataset.bed> ${K} --supervised
        
        # Generate global ancestry bar plots.
        Rscript plt_structure.R ${K} GTEx_CEU_YRI_dataset.${K}.Q <GTEx_CEU_YRI_dataset.fam> sample_ids.txt
        
